


#pragma once
#include <openssl/obj_mac.h>
#include <openssl/params.h>

  OSSL_PARAM* bign_curve256v1_params(void);
  /* Регистрация кривой bign в OpenSSL */
  int bign_curve_register256();
static int stb_register_curve(OSSL_LIB_CTX* ctx, const char* name,
    const OSSL_PARAM* params);



//=====================================================================================
typedef struct {
    int field_type,             /* either NID_X9_62_prime_field or
                                 * NID_X9_62_characteristic_two_field */
        seed_len, param_len;
    unsigned int cofactor;      /* promoted to BN_ULONG */
} EC_CURVE_DATA;

static const struct {
    EC_CURVE_DATA h;
    unsigned char data[8 + 32 * 6];
} _EC_BIGN_256V1 = {
    {
        NID_X9_62_prime_field, 8, 32, 1
    },
    {
        /* seed */
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x38, 0x5E,
        /* p */
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x43,
        /* a */
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x40,
        /* b */
        0x77, 0xCE, 0x6C, 0x15, 0x15, 0xF3, 0xA8, 0xED, 0xD2, 0xC1, 0x3A, 0xAB,
        0xE4, 0xD8, 0xFB, 0xBE, 0x4C, 0xF5, 0x50, 0x69, 0x97, 0x8B, 0x92, 0x53,
        0xB2, 0x2E, 0x7D, 0x6B, 0xD6, 0x9C, 0x03, 0xF1,
        /* x */
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* y */
        0x6B, 0xF7, 0xFC, 0x3C, 0xFB, 0x16, 0xD6, 0x9F, 0x5C, 0xE4, 0xC9, 0xA3,
        0x51, 0xD6, 0x83, 0x5D, 0x78, 0x91, 0x39, 0x66, 0xC4, 0x08, 0xF6, 0x52,
        0x1E, 0x29, 0xCF, 0x18, 0x04, 0x51, 0x6A, 0x93,
        /* order */
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xD9, 0x5C, 0x8E, 0xD6, 0x0D, 0xFB, 0x4D, 0xFC,
        0x7E, 0x5A, 0xBF, 0x99, 0x26, 0x3D, 0x66, 0x07
    }
};

static const struct {
    EC_CURVE_DATA h;
    unsigned char data[8 + 48 * 6];
} _EC_BIGN_384V1 = {
    {
        NID_X9_62_prime_field, 8, 48, 1
    },
    {
        /* seed */
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x23,
        /* p */
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xC3,
        /* a */
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xC0,
        /* b */
        0x3C, 0x75, 0xDF, 0xE1, 0x95, 0x9C, 0xEF, 0x20, 0x33, 0x07, 0x5A, 0xAB,
        0x65, 0x5D, 0x34, 0xD2, 0x71, 0x27, 0x48, 0xBB, 0x0F, 0xFB, 0xB1, 0x96,
        0xA6, 0x21, 0x6A, 0xF9, 0xE9, 0x71, 0x2E, 0x3A, 0x14, 0xBD, 0xE2, 0xF0,
        0xF3, 0xCE, 0xBD, 0x7C, 0xBC, 0xA7, 0xFC, 0x23, 0x68, 0x73, 0xBF, 0x64,
        /* x */
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        /* y */
        0x5D, 0x43, 0x82, 0x24, 0xA8, 0x2E, 0x9E, 0x9E, 0x63, 0x30, 0x11, 0x7E,
        0x43, 0x2D, 0xBF, 0x89, 0x3A, 0x72, 0x9A, 0x11, 0xDC, 0x86, 0xFF, 0xA0,
        0x05, 0x49, 0xE7, 0x9E, 0x66, 0xB1, 0xD3, 0x55, 0x84, 0x40, 0x3E, 0x27,
        0x6B, 0x2A, 0x42, 0xF9, 0xEA, 0x5E, 0xCB, 0x31, 0xF7, 0x33, 0xC4, 0x51,
        /* order */
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
        0x6C, 0xCC, 0xC4, 0x03, 0x73, 0xAF, 0x7B, 0xBB, 0x80, 0x46, 0xDA, 0xE7,
        0xA6, 0xA4, 0xFF, 0x0A, 0x3D, 0xB7, 0xDC, 0x3F, 0xF3, 0x0C, 0xA7, 0xB7
    }
};

static const struct {
    EC_CURVE_DATA h;
    unsigned char data[8 + 64 * 6];
} _EC_BIGN_512V1 = {
    {
        NID_X9_62_prime_field, 8, 64, 1
    },
    {
        /* seed */
        0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x17, 0xAE,
        /* p */
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFD, 0xC7,
        /* a */
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFD, 0xC4,
        /* b */
        0x6C, 0xB4, 0x59, 0x44, 0x93, 0x3B, 0x8C, 0x43, 0xD8, 0x8C, 0x5D, 0x6A,
        0x60, 0xFD, 0x58, 0x89, 0x5B, 0xC6, 0xA9, 0xEE, 0xDD, 0x5D, 0x25, 0x51,
        0x17, 0xCE, 0x13, 0xE3, 0xDA, 0xAD, 0xB0, 0x88, 0x27, 0x11, 0xDC, 0xB5,
        0xC4, 0x24, 0x5E, 0x95, 0x29, 0x33, 0x00, 0x8C, 0x87, 0xAC, 0xA2, 0x43,
        0xEA, 0x86, 0x22, 0x27, 0x3A, 0x49, 0xA2, 0x7A, 0x09, 0x34, 0x69, 0x98,
        0xD6, 0x13, 0x9C, 0x90,
        /* x */
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        /* y */
        0xA8, 0x26, 0xFF, 0x7A, 0xE4, 0x03, 0x76, 0x81, 0xB1, 0x82, 0xE6, 0xF7,
        0xA0, 0xD1, 0x8F, 0xAB, 0xB0, 0xAB, 0x41, 0xB3, 0xB3, 0x61, 0xBC, 0xE2,
        0xD2, 0xED, 0xF8, 0x1B, 0x00, 0xCC, 0xCA, 0xDA, 0x69, 0x73, 0xDD, 0xE2,
        0x0E, 0xFA, 0x6F, 0xD2, 0xFF, 0x77, 0x73, 0x95, 0xEE, 0xE8, 0x22, 0x61,
        0x67, 0xAA, 0x83, 0xB9, 0xC9, 0x4C, 0x0D, 0x04, 0xB7, 0x92, 0xAE, 0x6F,
        0xCE, 0xEF, 0xED, 0xBD,
        /* order */
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB2, 0xC0, 0x09, 0x2C,
        0x01, 0x98, 0x00, 0x4E, 0xF2, 0x6B, 0xEB, 0xB0, 0x2E, 0x21, 0x13, 0xF4,
        0x36, 0x1B, 0xCA, 0xE5, 0x95, 0x56, 0xDF, 0x32, 0xDC, 0xFF, 0xAD, 0x49,
        0x0D, 0x06, 0x8E, 0xF1
    }
};
